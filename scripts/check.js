/**
 * ุณูุฑุจุช ูุญุต ุณูุงูุฉ ุงููุดุฑูุน
 * ูููู ูุฐุง ุงูุณูุฑุจุช ุจูุญุต ูููู ุงููุดุฑูุน ูุงูุชุญูู ูู ูุฌูุฏ ุฌููุน ุงููููุงุช ูุงููุชุทูุจุงุช
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const chalk = require('chalk'); // ูู ุจุชุซุจูุช ูุฐู ุงูุญุฒูุฉ: npm install chalk

// ุชุญุฏูุฏ ุงููุณุงุฑ ุงูุฑุฆูุณู ูููุดุฑูุน
const rootDir = path.resolve(__dirname, '..');
console.log(chalk.blue('โ๏ธ ุจุฏุก ูุญุต ูุดุฑูุน ูุฒุงููุฉ ุงููุชุงุฌุฑ ุงููุชุนุฏุฏุฉ...'));

// ูุญุต ูุฌูุฏ ุงููุฌูุฏุงุช ุงูุฑุฆูุณูุฉ
const requiredDirs = [
  'server',
  'client',
  'database',
  'scripts'
];

console.log(chalk.yellow('\n๐ ูุญุต ุงููุฌูุฏุงุช ุงูุฑุฆูุณูุฉ:'));
let dirsOk = true;
requiredDirs.forEach(dir => {
  const dirPath = path.join(rootDir, dir);
  if (fs.existsSync(dirPath)) {
    console.log(chalk.green(`โ ูุฌูุฏ ${dir} ููุฌูุฏ`));
  } else {
    console.log(chalk.red(`โ ูุฌูุฏ ${dir} ุบูุฑ ููุฌูุฏ`));
    dirsOk = false;
  }
});

// ูุญุต ูููุงุช ุงูุฅุนุฏุงุฏ ุงูุฃุณุงุณูุฉ
console.log(chalk.yellow('\n๐ ูุญุต ูููุงุช ุงูุฅุนุฏุงุฏ:'));
let configOk = true;

// ูุญุต ููู env ุงูุฎุงุฏู
const serverEnvPath = path.join(rootDir, 'server', '.env');
if (fs.existsSync(serverEnvPath)) {
  console.log(chalk.green('โ ููู .env ููุฎุงุฏู ููุฌูุฏ'));
  
  // ูุญุต ูุญุชูู ููู env
  const envContent = fs.readFileSync(serverEnvPath, 'utf8');
  const requiredEnvVars = [
    'PORT',
    'MONGODB_URI',
    'JWT_SECRET'
  ];
  
  requiredEnvVars.forEach(envVar => {
    if (envContent.includes(envVar)) {
      console.log(chalk.green(`  โ ูุชุบูุฑ ${envVar} ููุฌูุฏ`));
    } else {
      console.log(chalk.red(`  โ ูุชุบูุฑ ${envVar} ุบูุฑ ููุฌูุฏ`));
      configOk = false;
    }
  });
} else {
  console.log(chalk.red('โ ููู .env ููุฎุงุฏู ุบูุฑ ููุฌูุฏ'));
  configOk = false;
}

// ูุญุต ุงูุชุจุนูุงุช
console.log(chalk.yellow('\n๐ฆ ูุญุต ุงูุชุจุนูุงุช:'));

try {
  console.log(chalk.blue('  ๐ ูุญุต ุชุจุนูุงุช ุงูุฎุงุฏู...'));
  execSync('cd ' + path.join(rootDir, 'server') + ' && npm ls --depth=0', { stdio: 'ignore' });
  console.log(chalk.green('  โ ุชุจุนูุงุช ุงูุฎุงุฏู ูุซุจุชุฉ ุจุดูู ุตุญูุญ'));
} catch (error) {
  console.log(chalk.red('  โ ูุดุงูู ูู ุชุจุนูุงุช ุงูุฎุงุฏู'));
  console.log(chalk.yellow('  โน๏ธ ูู ุจุชุดุบูู: cd server && npm install'));
}

try {
  console.log(chalk.blue('  ๐ ูุญุต ุชุจุนูุงุช ุงูุนููู...'));
  execSync('cd ' + path.join(rootDir, 'client') + ' && npm ls --depth=0', { stdio: 'ignore' });
  console.log(chalk.green('  โ ุชุจุนูุงุช ุงูุนููู ูุซุจุชุฉ ุจุดูู ุตุญูุญ'));
} catch (error) {
  console.log(chalk.red('  โ ูุดุงูู ูู ุชุจุนูุงุช ุงูุนููู'));
  console.log(chalk.yellow('  โน๏ธ ูู ุจุชุดุบูู: cd client && npm install'));
}

// ูุญุต ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช
console.log(chalk.yellow('\n๐๏ธ ูุญุต ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:'));
try {
  console.log(chalk.blue('  ๐ ุฌุงุฑู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...'));
  const mongoose = require(path.join(rootDir, 'server', 'node_modules', 'mongoose'));
  const dotenv = require(path.join(rootDir, 'server', 'node_modules', 'dotenv'));
  
  dotenv.config({ path: serverEnvPath });
  
  mongoose
    .connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    })
    .then(() => {
      console.log(chalk.green('  โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ'));
      mongoose.connection.close();
    })
    .catch(err => {
      console.log(chalk.red('  โ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช'));
      console.log(chalk.red(`  โ ุงูุฎุทุฃ: ${err.message}`));
    });
} catch (error) {
  console.log(chalk.red('  โ ุฎุทุฃ ูู ุงูุชุญูู ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช'));
  console.log(chalk.red(`  โ ุงูุฎุทุฃ: ${error.message}`));
}

// ุงููุชูุฌุฉ ุงูููุงุฆูุฉ
console.log(chalk.yellow('\n๐ ููุฎุต ุงููุญุต:'));
if (dirsOk && configOk) {
  console.log(chalk.green('โ ุงููุดุฑูุน ุฌุงูุฒ ููุชุดุบูู'));
  console.log(chalk.blue('\nูุจุฏุก ุงููุดุฑูุน:'));
  console.log(chalk.white('1. ุชุดุบูู ุงูุฎุงุฏู: cd server && npm run dev'));
  console.log(chalk.white('2. ุชุดุบูู ุงูุนููู: cd client && npm start'));
} else {
  console.log(chalk.red('โ ููุฌุฏ ูุดุงูู ูู ุงููุดุฑูุน ุชุญุชุงุฌ ุฅูู ูุนุงูุฌุฉ ูุจู ุงูุชุดุบูู'));
}

console.log(chalk.blue('\nโ๏ธ ุงูุชูู ูุญุต ุงููุดุฑูุน'));